#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command>
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     "qutebrowser" : echo "hello qutebrowser"
#     "finder"      : false
# ]

# Window management mode
:: default : osdodc hide
:: window @ : osdodc show
rshift - f13 ; window
window < escape ; default
window < ctrl - c ; default

# focus window
default, window < alt - h : chunkc tiling::window --focus west
default, window < alt - j : chunkc tiling::window --focus south
default, window < alt - k : chunkc tiling::window --focus north
default, window < alt - l : chunkc tiling::window --focus east

default, window < alt - p : chunkc tiling::window --focus prev
default, window < alt - n : chunkc tiling::window --focus next

# equalize size of windows
window < 0 : chunkc tiling::desktop --equalize

# swap window
window < shift - h : chunkc tiling::window --swap west
window < shift - j : chunkc tiling::window --swap south
window < shift - k : chunkc tiling::window --swap north
window < shift - l : chunkc tiling::window --swap east

# move window
window < h : chunkc tiling::window --warp west
window < j : chunkc tiling::window --warp south
window < k : chunkc tiling::window --warp north
window < l : chunkc tiling::window --warp east

# increase region size
window < cmd - h : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge west
window < cmd - j : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge south
window < cmd - k : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge north
window < cmd - l : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge east

# decrease region size
window < shift + cmd - l : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge west
window < shift + cmd - k : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge south
window < shift + cmd - j : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge north
window < shift + cmd - h : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge east

# set insertion point for focused container
ctrl + alt - f : chunkc tiling::window --use-insertion-point cancel
ctrl + alt - h : chunkc tiling::window --use-insertion-point west
ctrl + alt - j : chunkc tiling::window --use-insertion-point south
ctrl + alt - k : chunkc tiling::window --use-insertion-point north
ctrl + alt - l : chunkc tiling::window --use-insertion-point east

# rotate tree
window < r : chunkc tiling::desktop --rotate 90

# mirror tree y-axis
window < y : chunkc tiling::desktop --mirror vertical

# mirror tree x-axis
window < x : chunkc tiling::desktop --mirror horizontal

# toggle window fullscreen
window < f : chunkc tiling::window --toggle fullscreen
alt + shift - f : chunkc tiling::window --toggle fullscreen

# toggle window native fullscreen
# window < alt - f : chunkc tiling::window --toggle native-fullscreen

# toggle window parent zoom
window < z : chunkc tiling::window --toggle parent

# toggle window split type
window < e : chunkc tiling::window --toggle split

# float / unfloat window and center on screen
window < t : chunkc tiling::window --toggle float;\
             chunkc tiling::window --grid-layout 4:4:1:1:2:2

# toggle sticky
window < s : chunkc tiling::window --toggle sticky

# toggle sticky, float and resize to picture-in-picture size
window < p : chunkc tiling::window --toggle sticky;\
             chunkc tiling::window --grid-layout 5:5:4:0:1:1

window < ctrl - a : chunkc tiling::desktop --layout bsp
window < ctrl - s : chunkc tiling::desktop --layout monocle
window < ctrl - d : chunkc tiling::desktop --layout float
